#!/usr/bin/groovy
//@Library('shared-libs') _

// -*- mode: groovy -*-
// Jenkins pipeline
// See documents at https://jenkins.io/doc/book/pipeline/jenkinsfile/

import groovy.transform.Field

/* Unrestricted tasks: tasks that do NOT generate artifacts */

// Utility functions
@Field
def utils

pipeline {
    agent any

    // Setup common job properties
    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 360, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        gitLabConnection('GitLab Master')
    }

    parameters {
        string(name: 'REF', defaultValue: 'nv-cudf-interop', description: 'Commit to build')
    }

    triggers {
        cron('H 0 * * *')
    }

    // Build stages
    stages {
        stage('Jenkins: Get sources') {
            steps {
                updateGitlabCommitStatus(name: 'Jenkins CI', state: 'running')
                script {
                    utils = load('tests/ci_build/jenkins_tools_spark.Groovy')
                    utils.checkoutSrcs()
                }
                stash name: 'srcs', excludes: '.git/'
                milestone label: 'Sources ready', ordinal: 1
            }
        }
        stage('Jenkins: Build & Test') {
            agent { label 'docker-gpu' }
            steps {
                unstash name: 'srcs'
                script {
                    def dockerImage = docker.build(
                        'xgboost-dev-centos7-build',
                        '-f jenkins/local/Dockerfile.centos7_build jenkins/local')
                    dockerImage.inside('--runtime=nvidia -v /etc/passwd:/etc/passwd -v /etc/group:/etc/group') {
                        sh 'scl enable devtoolset-7 jenkins/local/build-jvm-nightly.sh'
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                if (currentBuild.currentResult == "SUCCESS") {
                    updateGitlabCommitStatus(name: 'Jenkins CI', state: "success")
                    slack("#rapidsai-spark-cicd", "Success", color: "#33CC33")
                } else {
                    updateGitlabCommitStatus(name: 'Jenkins CI', state: "failed")
                    slack("#rapidsai-spark-cicd", "Failed", color: "#FF0000")
                }
            }
        }
    }
}

void slack(Map params = [:], String channel, String message) {
    Map defaultParams = [
            color: "#000000",
            baseUrl: "https://nvidia.slack.com/services/hooks/jenkins-ci/",
            tokenCredentialId: "slack_token"
    ]

    params["channel"] = channel
    params["message"] = "${BUILD_URL}\n" + message

    slackSend(defaultParams << params)
}
