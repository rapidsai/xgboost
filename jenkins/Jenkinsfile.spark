#!/usr/bin/groovy
// -*- mode: groovy -*-
// Jenkins pipeline
// See documents at https://jenkins.io/doc/book/pipeline/jenkinsfile/
@Library('shared-libs') _

import groovy.transform.Field

/* Unrestricted tasks: tasks that do NOT generate artifacts */

// Command to run command inside a docker container
def dockerRun = 'tests/ci_build/ci_build_spark.sh'
// Utility functions
@Field
def utils

def buildMatrix = [
    [ "enabled": true,  "os" : "linux", "withGpu": true, "withNccl": true,  "withOmp": true, "withSpark": true, "cudaVersion": "10.0"],
]

pipeline {
    agent any

//    environment {
//        DOCKER_CACHE_REPO = 'apt-sh04.nvidia.com:5005'
//    }

    // Setup common job properties
    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 120, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        gitLabConnection('GitLab Master')
    }

    parameters {
        string(name: 'REF', defaultValue: '\${gitlabBranch}', description: 'Commit to build')
    }

    // Build stages
    stages {
        stage('Jenkins: Get sources') {
            steps {
                updateGitlabCommitStatus(name: 'Jenkins CI', state: 'running')
                script {
                    utils = load('tests/ci_build/jenkins_tools_spark.Groovy')
                    utils.checkoutSrcs()
                }
                stash name: 'srcs', excludes: '.git/'
                milestone label: 'Sources ready', ordinal: 1
            }
        }
        stage('Jenkins: Build & Test') {
            steps {
                withMergedBranch {
                    script {
                        echo 'run buildFactory'
                        buildPlatformCmake("sparkgpu", buildMatrix[0], "docker-gpu", "sparkgpu")
                        //buildMatrix.findAll{it['enabled']}.collectEntries{ c ->
                        //    def buildName = "sparkgpu"
                        //    utils.buildFactory(buildName, c, false, this.&buildPlatformCmake)
                        //}
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def status = "failed"
                if (currentBuild.currentResult == "SUCCESS")
                    status = "success"
                updateGitlabCommitStatus(name: 'Jenkins CI', state: status)
            }
        }
    }
}

/**
 * Build platform and test it via cmake.
 */
def buildPlatformCmake(buildName, conf, nodeReq, dockerTarget) {
    // Destination dir for artifacts
    echo 'Begin buildPlatformCmake'
    def distDir = "dist/${buildName}"
    def dockerArgs = ""
    if (conf["withGpu"]) {
        dockerArgs = "--build-arg CUDA_VER=" + conf["cudaVersion"]
    }
    def test_suite = conf["withSpark"] ? "sparkgpu" : (conf["withGpu"] ? (conf["multiGpu"] ? "mgpu" : "gpu") : "cpu")
    // Build node - this is returned result
    retry(1) {
        node(nodeReq) {
            unstash name: 'srcs'
            echo """
            |===== XGBoost Spark  build =====
            |  dockerTarget: ${dockerTarget}
            |  distDir   : ${distDir}
            |  test_suite : ${test_suite}
            |=========================
            """.stripMargin('|')
            // Invoke command inside docker
            sh """
            ${dockerRun} ${dockerTarget} ${dockerArgs} /bin/bash -i tests/ci_build/build_jvm.sh
            """
        }
    }
}

